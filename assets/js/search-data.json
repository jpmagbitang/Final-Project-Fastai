{
  
    
        "post0": {
            "title": "Project Assignment",
            "content": "Import the Data . import sklearn.cluster import sklearn.linear_model import sklearn.model_selection import matplotlib.pyplot as plt import numpy as np import ipywidgets import plotly.graph_objects as go import pandas as pd ## importing the dataset df = pd.read_csv(&#39;salaries-by-college-type.csv&#39;) . df . School Name School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Massachusetts Institute of Technology (MIT) | Engineering | $72,200.00 | $126,000.00 | $76,800.00 | $99,200.00 | $168,000.00 | $220,000.00 | . 1 California Institute of Technology (CIT) | Engineering | $75,500.00 | $123,000.00 | NaN | $104,000.00 | $161,000.00 | NaN | . 2 Harvey Mudd College | Engineering | $71,800.00 | $122,000.00 | NaN | $96,000.00 | $180,000.00 | NaN | . 3 Polytechnic University of New York, Brooklyn | Engineering | $62,400.00 | $114,000.00 | $66,800.00 | $94,300.00 | $143,000.00 | $190,000.00 | . 4 Cooper Union | Engineering | $62,200.00 | $114,000.00 | NaN | $80,200.00 | $142,000.00 | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 264 Austin Peay State University | State | $37,700.00 | $59,200.00 | $32,200.00 | $40,500.00 | $73,900.00 | $96,200.00 | . 265 Pittsburg State University | State | $40,400.00 | $58,200.00 | $25,600.00 | $46,000.00 | $84,600.00 | $117,000.00 | . 266 Southern Utah University | State | $41,900.00 | $56,500.00 | $30,700.00 | $39,700.00 | $78,400.00 | $116,000.00 | . 267 Montana State University - Billings | State | $37,900.00 | $50,600.00 | $22,600.00 | $31,800.00 | $78,500.00 | $98,900.00 | . 268 Black Hills State University | State | $35,300.00 | $43,900.00 | $27,000.00 | $32,200.00 | $60,900.00 | $87,600.00 | . 269 rows × 8 columns . df = df.drop(df.columns[0], axis=1) df.describe() . School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . count 269 | 269 | 269 | 231 | 269 | 269 | 231 | . unique 5 | 145 | 168 | 141 | 178 | 110 | 98 | . top State | $42,600.00 | $72,100.00 | $40,100.00 | $54,100.00 | $106,000.00 | $150,000.00 | . freq 175 | 7 | 5 | 6 | 6 | 11 | 8 | . df[&quot;School Type&quot;].value_counts() . State 175 Liberal Arts 47 Party 20 Engineering 19 Ivy League 8 Name: School Type, dtype: int64 . df.groupby(&#39;School Type&#39;).count() . Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . School Type . Engineering 19 | 19 | 15 | 19 | 19 | 15 | . Ivy League 8 | 8 | 8 | 8 | 8 | 8 | . Liberal Arts 47 | 47 | 14 | 47 | 47 | 14 | . Party 20 | 20 | 19 | 20 | 20 | 19 | . State 175 | 175 | 175 | 175 | 175 | 175 | . subsetdf = df[df[&#39;School Type&#39;].isin([&#39;Engineering&#39;, &#39;Ivy League&#39;,&#39;Liberal Arts&#39;]) ] subsetdf . School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Engineering | $72,200.00 | $126,000.00 | $76,800.00 | $99,200.00 | $168,000.00 | $220,000.00 | . 1 Engineering | $75,500.00 | $123,000.00 | NaN | $104,000.00 | $161,000.00 | NaN | . 2 Engineering | $71,800.00 | $122,000.00 | NaN | $96,000.00 | $180,000.00 | NaN | . 3 Engineering | $62,400.00 | $114,000.00 | $66,800.00 | $94,300.00 | $143,000.00 | $190,000.00 | . 4 Engineering | $62,200.00 | $114,000.00 | NaN | $80,200.00 | $142,000.00 | NaN | . ... ... | ... | ... | ... | ... | ... | ... | . 89 Ivy League | $63,400.00 | $124,000.00 | $54,800.00 | $86,200.00 | $179,000.00 | $288,000.00 | . 90 Ivy League | $60,900.00 | $120,000.00 | $55,900.00 | $79,200.00 | $192,000.00 | $282,000.00 | . 91 Ivy League | $60,300.00 | $110,000.00 | $56,800.00 | $79,800.00 | $160,000.00 | $210,000.00 | . 92 Ivy League | $56,200.00 | $109,000.00 | $55,400.00 | $74,400.00 | $159,000.00 | $228,000.00 | . 93 Ivy League | $59,400.00 | $107,000.00 | $50,300.00 | $71,900.00 | $161,000.00 | $241,000.00 | . 74 rows × 7 columns . subsetcol= [&#39;Starting Median Salary&#39;,&#39;Mid-Career Median Salary&#39;,&#39;Mid-Career 10th Percentile Salary&#39;,&#39;Mid-Career 25th Percentile Salary&#39;,&#39;Mid-Career 75th Percentile Salary&#39;,&#39;Mid-Career 90th Percentile Salary&#39;] for x in subsetcol: subsetdf[x] = subsetdf[x].str.replace(&quot;$&quot;,&quot;&quot;) subsetdf[x] = subsetdf[x].str.replace(&quot;,&quot;,&quot;&quot;) subsetdf[x] = pd.to_numeric(subsetdf[x]) subsetdf.head() . C: Users Patrick Magbitang AppData Local Temp ipykernel_2388 128551400.py:6: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True. subsetdf[x] = subsetdf[x].str.replace(&#34;$&#34;,&#34;&#34;) C: Users Patrick Magbitang AppData Local Temp ipykernel_2388 128551400.py:6: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy subsetdf[x] = subsetdf[x].str.replace(&#34;$&#34;,&#34;&#34;) C: Users Patrick Magbitang AppData Local Temp ipykernel_2388 128551400.py:7: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy subsetdf[x] = subsetdf[x].str.replace(&#34;,&#34;,&#34;&#34;) C: Users Patrick Magbitang AppData Local Temp ipykernel_2388 128551400.py:8: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy subsetdf[x] = pd.to_numeric(subsetdf[x]) . School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Engineering | 72200.0 | 126000.0 | 76800.0 | 99200.0 | 168000.0 | 220000.0 | . 1 Engineering | 75500.0 | 123000.0 | NaN | 104000.0 | 161000.0 | NaN | . 2 Engineering | 71800.0 | 122000.0 | NaN | 96000.0 | 180000.0 | NaN | . 3 Engineering | 62400.0 | 114000.0 | 66800.0 | 94300.0 | 143000.0 | 190000.0 | . 4 Engineering | 62200.0 | 114000.0 | NaN | 80200.0 | 142000.0 | NaN | . Step 3: Question to Explore . How can machine learning predict what is are the most lucrative jobs in the future? I will be looking at the df dataset which is a dataset that gives the starting salaries coming from different college degrees and also the future salaries. I have taken that df dataset and created a subset dataset to look specifically at engineering, ivy league, and liberal arts schools. This gives me a set of 74 observations. The variables I will be looking at are Starting Median Salary which will be my independent variable, and I will be putting this against the variables that display future salary predictions. It will help me see if there is a good correlation between starting salaries and future salaries and see if these predictions of the future salaries are justified. . Step 4: Plots Regarding Question . subsetdf = subsetdf.dropna() subsetdf . School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Engineering | 72200.0 | 126000.0 | 76800.0 | 99200.0 | 168000.0 | 220000.0 | . 3 Engineering | 62400.0 | 114000.0 | 66800.0 | 94300.0 | 143000.0 | 190000.0 | . 5 Engineering | 61000.0 | 114000.0 | 80000.0 | 91200.0 | 137000.0 | 180000.0 | . 6 Engineering | 61800.0 | 111000.0 | 63300.0 | 80100.0 | 150000.0 | 209000.0 | . 7 Engineering | 61100.0 | 110000.0 | 71600.0 | 85500.0 | 140000.0 | 182000.0 | . 8 Engineering | 58300.0 | 106000.0 | 67200.0 | 85200.0 | 137000.0 | 183000.0 | . 9 Engineering | 58100.0 | 106000.0 | 62200.0 | 87900.0 | 142000.0 | 201000.0 | . 10 Engineering | 60600.0 | 105000.0 | 68700.0 | 81900.0 | 138000.0 | 185000.0 | . 11 Engineering | 56000.0 | 97800.0 | 56100.0 | 77400.0 | 121000.0 | 165000.0 | . 12 Engineering | 53000.0 | 96700.0 | 55200.0 | 74000.0 | 117000.0 | 153000.0 | . 13 Engineering | 53500.0 | 95400.0 | 50600.0 | 71400.0 | 124000.0 | 163000.0 | . 14 Engineering | 55800.0 | 93400.0 | 71500.0 | 81900.0 | 122000.0 | 147000.0 | . 16 Engineering | 48900.0 | 84600.0 | 45000.0 | 62100.0 | 112000.0 | 159000.0 | . 17 Engineering | 52700.0 | 80700.0 | 49800.0 | 64000.0 | 106000.0 | 142000.0 | . 18 Engineering | 46200.0 | 80000.0 | 42100.0 | 62600.0 | 99500.0 | 121000.0 | . 39 Liberal Arts | 54100.0 | 110000.0 | 62800.0 | 80600.0 | 156000.0 | 251000.0 | . 40 Liberal Arts | 52800.0 | 108000.0 | 60000.0 | 76700.0 | 167000.0 | 265000.0 | . 42 Liberal Arts | 53900.0 | 107000.0 | 70600.0 | 79300.0 | 144000.0 | 204000.0 | . 52 Liberal Arts | 46500.0 | 97900.0 | 42000.0 | 62500.0 | 126000.0 | 215000.0 | . 54 Liberal Arts | 47200.0 | 95800.0 | 48700.0 | 75200.0 | 135000.0 | 230000.0 | . 55 Liberal Arts | 48600.0 | 94600.0 | 44500.0 | 59400.0 | 151000.0 | 211000.0 | . 60 Liberal Arts | 41400.0 | 88300.0 | 49500.0 | 57400.0 | 133000.0 | 185000.0 | . 61 Liberal Arts | 45300.0 | 86200.0 | 41300.0 | 61000.0 | 120000.0 | 185000.0 | . 64 Liberal Arts | 45500.0 | 85200.0 | 38700.0 | 58400.0 | 129000.0 | 189000.0 | . 65 Liberal Arts | 44000.0 | 83900.0 | 45100.0 | 59800.0 | 129000.0 | 184000.0 | . 71 Liberal Arts | 46600.0 | 81500.0 | 48900.0 | 60100.0 | 104000.0 | 137000.0 | . 76 Liberal Arts | 42100.0 | 80000.0 | 35600.0 | 54300.0 | 100000.0 | 160000.0 | . 82 Liberal Arts | 38900.0 | 72600.0 | 38200.0 | 53400.0 | 104000.0 | 140000.0 | . 85 Liberal Arts | 39500.0 | 63900.0 | 38800.0 | 47200.0 | 91600.0 | 120000.0 | . 86 Ivy League | 58000.0 | 134000.0 | 63100.0 | 90200.0 | 234000.0 | 321000.0 | . 87 Ivy League | 66500.0 | 131000.0 | 68900.0 | 100000.0 | 190000.0 | 261000.0 | . 88 Ivy League | 59100.0 | 126000.0 | 58000.0 | 80600.0 | 198000.0 | 326000.0 | . 89 Ivy League | 63400.0 | 124000.0 | 54800.0 | 86200.0 | 179000.0 | 288000.0 | . 90 Ivy League | 60900.0 | 120000.0 | 55900.0 | 79200.0 | 192000.0 | 282000.0 | . 91 Ivy League | 60300.0 | 110000.0 | 56800.0 | 79800.0 | 160000.0 | 210000.0 | . 92 Ivy League | 56200.0 | 109000.0 | 55400.0 | 74400.0 | 159000.0 | 228000.0 | . 93 Ivy League | 59400.0 | 107000.0 | 50300.0 | 71900.0 | 161000.0 | 241000.0 | . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career Median Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career&#39;) . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 10th Percentile Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career 10th Percentile&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 10th Percentile&#39;) . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 25th Percentile Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career 25th Percentile&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 25th Percentile&#39;) . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 75th Percentile Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career 75th Percentile&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 75th Percentile&#39;) . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 90th Percentile Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career 90th Percentile&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 90th Percentile&#39;) . Step 5: Machine Learning Train/Test . from sklearn.preprocessing import MinMaxScaler from sklearn.metrics import mean_squared_error, r2_score ##setting which x and y from the plots I want to look at x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 25th Percentile Salary&#39;] x = x.values.reshape(-1,1) scaler = MinMaxScaler() x = scaler.fit_transform(x) #setting model to use model = sklearn.linear_model.LinearRegression() ##gathering test and training data x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( x, y, test_size=0.2, random_state=42) model.fit(x_train,y_train) y_pred = model.predict(x_test) print(&quot;Y-Intercept = %.2f&quot; % model.intercept_) print(&quot;X-Coefficients= &quot;, model.coef_) print(&#39;MSE = %.2f&#39; % mean_squared_error(y_test, y_pred)) print(&#39;R^2 = %.2f&#39; % r2_score(y_test, y_pred)) plt.scatter(x_train,y_train,color=&#39;black&#39;) plt.scatter(x_test,y_test,color=&#39;blue&#39;) ## Creating the Regression Model x_model_vals = np.linspace(0.0, 1.0, 37).reshape(-1,1) y_model1_vals = model.predict(x_model_vals) plt.plot(x_model_vals,y_model1_vals,&#39;red&#39;) y_pred = model.predict(x_test) . Y-Intercept = 51626.91 X-Coefficients= [50020.40238362] MSE = 34236454.02 R^2 = 0.79 . From the train/test split we get that the mean squared error is 34236454.02 and that r squared value is 0.79. The r squared is relatively high therefore we can say the regression fits pretty well with the points from these sets. .",
            "url": "https://jpmagbitang.github.io/Final-Project-Fastai/2022/08/29/Project-Assignment-2.html",
            "relUrl": "/2022/08/29/Project-Assignment-2.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jpmagbitang.github.io/Final-Project-Fastai/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jpmagbitang.github.io/Final-Project-Fastai/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jpmagbitang.github.io/Final-Project-Fastai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jpmagbitang.github.io/Final-Project-Fastai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}