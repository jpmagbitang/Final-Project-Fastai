{
  
    
        "post0": {
            "title": "Is College Worth it?",
            "content": "Introduction . In thinking about a topic for this project, one that had come to mind was college and college graduates. For many people, college is a very big deal and is necessary for one to succeed in their particular career. However, many also contemplate the costs that college could bring, especially the heavy payments that many schools require. It also doesn&#39;t help when many parents engrave the pressure of getting a degree at such young ages. This all goes through the minds of many people in deciding whether or not college is for them. College graduates also have a similar problem. Having just finished their last final, these graduates are pushed into the real world where, the job market is very competitive, and with many students with no job offers right away it could bring up thoughts such as, &quot;was the last four years worth it?&quot;. Being a recent college graduate, these have been some thoughts that have gone through my head, which sparked my interest in researching this topic. One thing that many think about in careers is what the pay is like. That is the going to be the foundation of this research, looking at all the factos that go into salaries. Where is the best region for different job types? What are the degrees that are the most lucrative? Does the college name matter when it ultimately comes to the salary? These are just some question to analyze within this topic and ultimately leads to the big question. . The BIG Question . What is the main point that this analysis will answer. Well ultimately, I want the audience of those contemplating college and college graduates to understand the different fields that they can go to and the benefits that college can bring as foundation for a successful career. In other words, is the pay after finishing college worth the costs to get in? . The DATA . The three datasets that are being analyzed are all datasets that provide information on salaries. They are split into salaries by college type, by degrees, and by region. These datasets are gathered from kaggle, specifically from https://www.kaggle.com/datasets/wsj/college-salaries. Each dataset will look at the starting median salary. This is the average salary for each specific field as the person enters that career. It will also look at the mid-career median salary, which is the salary of someone that has been in a field of work for about 5 to 10 years. And this is also split into another four variables that looks at the different percentiles and salaries in each perspective group. The first dataset looks at salaries by college type. It is a collection of 269 colleges that range from schools like MIT and Black Hills State University. These colleges are placed into 5 groups that are categorized as Engineering, State, Ivy League, Party, and Liberal Arts schools. The second data set involves different majors and the same variables that measure the salaries for each. This dataset also has a new variable of percent change, where it measures the percent change, usually increase, from starting salaries to mid-career. Lastly, the last dataset is also a dataset of various schools and are broken into regions instead of school types. The regions consist of California, Western, Midwestern, Northeastern, and Southern regions. All of these datasets are used to measure the starting salaries but also see the increase in different fields and really illustrate the most lucrative fields. . import sklearn.cluster import sklearn.linear_model import sklearn.model_selection import matplotlib.pyplot as plt import numpy as np import ipywidgets import plotly.graph_objects as go import pandas as pd import seaborn as sns . df = pd.read_csv(&#39;salaries-by-college-type.csv&#39;) df2 = pd.read_csv(&#39;degrees-that-pay-back.csv&#39;) df3 = pd.read_csv(&#39;salaries-by-region.csv&#39;) . df.head() . School Name School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Massachusetts Institute of Technology (MIT) | Engineering | $72,200.00 | $126,000.00 | $76,800.00 | $99,200.00 | $168,000.00 | $220,000.00 | . 1 California Institute of Technology (CIT) | Engineering | $75,500.00 | $123,000.00 | NaN | $104,000.00 | $161,000.00 | NaN | . 2 Harvey Mudd College | Engineering | $71,800.00 | $122,000.00 | NaN | $96,000.00 | $180,000.00 | NaN | . 3 Polytechnic University of New York, Brooklyn | Engineering | $62,400.00 | $114,000.00 | $66,800.00 | $94,300.00 | $143,000.00 | $190,000.00 | . 4 Cooper Union | Engineering | $62,200.00 | $114,000.00 | NaN | $80,200.00 | $142,000.00 | NaN | . df[&quot;School Type&quot;].value_counts() . State 175 Liberal Arts 47 Party 20 Engineering 19 Ivy League 8 Name: School Type, dtype: int64 . df2.head() . Undergraduate Major Starting Median Salary Mid-Career Median Salary Percent change from Starting to Mid-Career Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Accounting | $46,000.00 | $77,100.00 | 67.6 | $42,200.00 | $56,100.00 | $108,000.00 | $152,000.00 | . 1 Aerospace Engineering | $57,700.00 | $101,000.00 | 75.0 | $64,300.00 | $82,100.00 | $127,000.00 | $161,000.00 | . 2 Agriculture | $42,600.00 | $71,900.00 | 68.8 | $36,300.00 | $52,100.00 | $96,300.00 | $150,000.00 | . 3 Anthropology | $36,800.00 | $61,500.00 | 67.1 | $33,800.00 | $45,500.00 | $89,300.00 | $138,000.00 | . 4 Architecture | $41,600.00 | $76,800.00 | 84.6 | $50,600.00 | $62,200.00 | $97,000.00 | $136,000.00 | . df3.head() . School Name Region Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Stanford University | California | $70,400.00 | $129,000.00 | $68,400.00 | $93,100.00 | $184,000.00 | $257,000.00 | . 1 California Institute of Technology (CIT) | California | $75,500.00 | $123,000.00 | NaN | $104,000.00 | $161,000.00 | NaN | . 2 Harvey Mudd College | California | $71,800.00 | $122,000.00 | NaN | $96,000.00 | $180,000.00 | NaN | . 3 University of California, Berkeley | California | $59,900.00 | $112,000.00 | $59,500.00 | $81,000.00 | $149,000.00 | $201,000.00 | . 4 Occidental College | California | $51,900.00 | $105,000.00 | NaN | $54,800.00 | $157,000.00 | NaN | . df3[&#39;Region&#39;].value_counts() . Northeastern 100 Southern 79 Midwestern 71 Western 42 California 28 Name: Region, dtype: int64 . Data Cleaning . When it comes to the data cleaning portion for the dataset, all of the datasets were input with dollar values where the dollar sign had made the values into strings. So to fix this, the columns with numericals with dollar signs have to converted to numerical values. The code below takes those strings with the dollar sign and removes the dollar sign then converts the rest of the string to a numeric. This had to be done to all three datasets. Another thing that needed to be addressed were the NaN values. During the analysis, these values would disrupt the calculations and plotting of points, so all the NaNs were dropped. This only appeared in the first dataframe and the third data frame. For the first data frame, 38 rows were dropped leaving the data frame with the dimensions of 231 rows by 8 columns. And for the third dataset, dropping the NaNs left the dimensions to be 273 rows by 9 columns. It had dropped 47 rows. In both datasets, 14 percent of the data was removed, which is not too much as it still leaves over 80 percent of the data to be analyzed. After doing these dasks the datasets were ready to be analyzed. . dfcol = [&#39;Starting Median Salary&#39;,&#39;Mid-Career Median Salary&#39;,&#39;Mid-Career 10th Percentile Salary&#39;,&#39;Mid-Career 25th Percentile Salary&#39;,&#39;Mid-Career 75th Percentile Salary&#39;,&#39;Mid-Career 90th Percentile Salary&#39;] for x in dfcol: df[x] = df[x].str.replace(&quot;$&quot;,&quot;&quot;) df[x] = df[x].str.replace(&quot;,&quot;,&quot;&quot;) df[x] = pd.to_numeric(df[x]) df.head() . C: Users Patrick Magbitang AppData Local Temp ipykernel_9888 2536284012.py:5: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True. df[x] = df[x].str.replace(&#34;$&#34;,&#34;&#34;) . School Name School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Massachusetts Institute of Technology (MIT) | Engineering | 72200.0 | 126000.0 | 76800.0 | 99200.0 | 168000.0 | 220000.0 | . 1 California Institute of Technology (CIT) | Engineering | 75500.0 | 123000.0 | NaN | 104000.0 | 161000.0 | NaN | . 2 Harvey Mudd College | Engineering | 71800.0 | 122000.0 | NaN | 96000.0 | 180000.0 | NaN | . 3 Polytechnic University of New York, Brooklyn | Engineering | 62400.0 | 114000.0 | 66800.0 | 94300.0 | 143000.0 | 190000.0 | . 4 Cooper Union | Engineering | 62200.0 | 114000.0 | NaN | 80200.0 | 142000.0 | NaN | . df2col = [&#39;Starting Median Salary&#39;,&#39;Mid-Career Median Salary&#39;,&#39;Mid-Career 10th Percentile Salary&#39;, &#39;Mid-Career 25th Percentile Salary&#39;,&#39;Mid-Career 75th Percentile Salary&#39;,&#39;Mid-Career 90th Percentile Salary&#39;] for x in df2col: df2[x] = df2[x].str.replace(&quot;$&quot;,&quot;&quot;) df2[x] = df2[x].str.replace(&quot;,&quot;,&quot;&quot;) df2[x] = pd.to_numeric(df2[x]) df2.head() . C: Users Patrick Magbitang AppData Local Temp ipykernel_9888 3148104007.py:6: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True. df2[x] = df2[x].str.replace(&#34;$&#34;,&#34;&#34;) . Undergraduate Major Starting Median Salary Mid-Career Median Salary Percent change from Starting to Mid-Career Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Accounting | 46000.0 | 77100.0 | 67.6 | 42200.0 | 56100.0 | 108000.0 | 152000.0 | . 1 Aerospace Engineering | 57700.0 | 101000.0 | 75.0 | 64300.0 | 82100.0 | 127000.0 | 161000.0 | . 2 Agriculture | 42600.0 | 71900.0 | 68.8 | 36300.0 | 52100.0 | 96300.0 | 150000.0 | . 3 Anthropology | 36800.0 | 61500.0 | 67.1 | 33800.0 | 45500.0 | 89300.0 | 138000.0 | . 4 Architecture | 41600.0 | 76800.0 | 84.6 | 50600.0 | 62200.0 | 97000.0 | 136000.0 | . df3col = [&#39;Starting Median Salary&#39;,&#39;Mid-Career Median Salary&#39;,&#39;Mid-Career 10th Percentile Salary&#39;,&#39;Mid-Career 25th Percentile Salary&#39;,&#39;Mid-Career 75th Percentile Salary&#39;, &#39;Mid-Career 90th Percentile Salary&#39;] for x in df3col: df3[x] = df3[x].str.replace(&quot;$&quot;,&quot;&quot;) df3[x] = df3[x].str.replace(&quot;,&quot;,&quot;&quot;) df3[x] = pd.to_numeric(df3[x]) df3.head() . C: Users Patrick Magbitang AppData Local Temp ipykernel_9888 4207690454.py:6: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True. df3[x] = df3[x].str.replace(&#34;$&#34;,&#34;&#34;) . School Name Region Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Stanford University | California | 70400.0 | 129000.0 | 68400.0 | 93100.0 | 184000.0 | 257000.0 | . 1 California Institute of Technology (CIT) | California | 75500.0 | 123000.0 | NaN | 104000.0 | 161000.0 | NaN | . 2 Harvey Mudd College | California | 71800.0 | 122000.0 | NaN | 96000.0 | 180000.0 | NaN | . 3 University of California, Berkeley | California | 59900.0 | 112000.0 | 59500.0 | 81000.0 | 149000.0 | 201000.0 | . 4 Occidental College | California | 51900.0 | 105000.0 | NaN | 54800.0 | 157000.0 | NaN | . df.describe() . Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . count 269.000000 | 269.000000 | 231.000000 | 269.000000 | 269.000000 | 231.000000 | . mean 46068.401487 | 83932.342007 | 44250.649351 | 60373.234201 | 116275.092937 | 157705.627706 | . std 6412.616242 | 14336.191107 | 8719.612427 | 11381.348857 | 22952.334054 | 34823.348157 | . min 34800.000000 | 43900.000000 | 22600.000000 | 31800.000000 | 60900.000000 | 87600.000000 | . 25% 42000.000000 | 74000.000000 | 39000.000000 | 53200.000000 | 100000.000000 | 136000.000000 | . 50% 44700.000000 | 81600.000000 | 43100.000000 | 58400.000000 | 113000.000000 | 153000.000000 | . 75% 48300.000000 | 92200.000000 | 47400.000000 | 65100.000000 | 126000.000000 | 170500.000000 | . max 75500.000000 | 134000.000000 | 80000.000000 | 104000.000000 | 234000.000000 | 326000.000000 | . df.dropna() . School Name School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Massachusetts Institute of Technology (MIT) | Engineering | 72200.0 | 126000.0 | 76800.0 | 99200.0 | 168000.0 | 220000.0 | . 3 Polytechnic University of New York, Brooklyn | Engineering | 62400.0 | 114000.0 | 66800.0 | 94300.0 | 143000.0 | 190000.0 | . 5 Worcester Polytechnic Institute (WPI) | Engineering | 61000.0 | 114000.0 | 80000.0 | 91200.0 | 137000.0 | 180000.0 | . 6 Carnegie Mellon University (CMU) | Engineering | 61800.0 | 111000.0 | 63300.0 | 80100.0 | 150000.0 | 209000.0 | . 7 Rensselaer Polytechnic Institute (RPI) | Engineering | 61100.0 | 110000.0 | 71600.0 | 85500.0 | 140000.0 | 182000.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 264 Austin Peay State University | State | 37700.0 | 59200.0 | 32200.0 | 40500.0 | 73900.0 | 96200.0 | . 265 Pittsburg State University | State | 40400.0 | 58200.0 | 25600.0 | 46000.0 | 84600.0 | 117000.0 | . 266 Southern Utah University | State | 41900.0 | 56500.0 | 30700.0 | 39700.0 | 78400.0 | 116000.0 | . 267 Montana State University - Billings | State | 37900.0 | 50600.0 | 22600.0 | 31800.0 | 78500.0 | 98900.0 | . 268 Black Hills State University | State | 35300.0 | 43900.0 | 27000.0 | 32200.0 | 60900.0 | 87600.0 | . 231 rows × 8 columns . df3.describe() . Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . count 320.000000 | 320.000000 | 273.000000 | 320.000000 | 320.000000 | 273.000000 | . mean 46253.437500 | 83934.375000 | 45253.113553 | 60614.062500 | 116496.875000 | 160442.124542 | . std 6617.038001 | 15191.443091 | 8562.834333 | 11786.436432 | 24104.265214 | 36785.768186 | . min 34500.000000 | 43900.000000 | 25600.000000 | 31800.000000 | 60900.000000 | 85700.000000 | . 25% 42000.000000 | 73725.000000 | 39500.000000 | 53100.000000 | 99825.000000 | 136000.000000 | . 50% 45100.000000 | 82700.000000 | 43700.000000 | 59400.000000 | 113000.000000 | 154000.000000 | . 75% 48900.000000 | 93250.000000 | 48900.000000 | 66025.000000 | 129000.000000 | 178000.000000 | . max 75500.000000 | 134000.000000 | 80000.000000 | 104000.000000 | 234000.000000 | 326000.000000 | . df3.dropna() . School Name Region Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Stanford University | California | 70400.0 | 129000.0 | 68400.0 | 93100.0 | 184000.0 | 257000.0 | . 3 University of California, Berkeley | California | 59900.0 | 112000.0 | 59500.0 | 81000.0 | 149000.0 | 201000.0 | . 5 Cal Poly San Luis Obispo | California | 57200.0 | 101000.0 | 55000.0 | 74700.0 | 133000.0 | 178000.0 | . 6 University of California at Los Angeles (UCLA) | California | 52600.0 | 101000.0 | 51300.0 | 72500.0 | 139000.0 | 193000.0 | . 7 University of California, San Diego (UCSD) | California | 51100.0 | 101000.0 | 51700.0 | 75400.0 | 131000.0 | 177000.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 315 State University of New York (SUNY) at Potsdam | Northeastern | 38000.0 | 70300.0 | 35100.0 | 51200.0 | 100000.0 | 179000.0 | . 316 Niagara University | Northeastern | 36900.0 | 69700.0 | 44000.0 | 57000.0 | 92000.0 | 128000.0 | . 317 State University of New York (SUNY) at Fredonia | Northeastern | 37800.0 | 66200.0 | 32800.0 | 44200.0 | 93300.0 | 181000.0 | . 318 University of Southern Maine | Northeastern | 39400.0 | 63600.0 | 40400.0 | 47900.0 | 85700.0 | 117000.0 | . 319 Mercy College | Northeastern | 43700.0 | 62600.0 | 35600.0 | 47300.0 | 99000.0 | 134000.0 | . 273 rows × 8 columns . Exploratory Data Analysis . fig = plt.figure(figsize=(8,14)) x = df2[&#39;Starting Median Salary&#39;] y = df2.index labels = df2[&#39;Undergraduate Major&#39;] plt.scatter(x, y, color=&#39;blue&#39;, label = &#39;Starting Median Salary&#39;) plt.yticks(y, labels) plt.xlabel(&#39;Salary in Dollars&#39;) plt.ylabel(&#39;Majors&#39;) plt.title(&#39;Starting Median Salary by Undergraduate Major&#39;) plt.legend(loc=1) plt.show() . After graphing the scatter plot of starting salaries for different majors, it is very confusing to look at as all the points are scattered and cannot really see clearly which majors are the best ones to chose. Therefore, the data must be sorted in order from either greatest salary to least or the other way around. . df2.sort_values(by = &#39;Starting Median Salary&#39;, ascending = True, inplace = True) df2 = df2.reset_index() df2.tail(15) . index Undergraduate Major Starting Median Salary Mid-Career Median Salary Percent change from Starting to Mid-Career Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 35 31 | Information Technology (IT) | 49100.0 | 74800.0 | 52.3 | 44500.0 | 56700.0 | 96700.0 | 129000.0 | . 36 35 | Management Information Systems (MIS) | 49200.0 | 82300.0 | 67.3 | 45300.0 | 60500.0 | 108000.0 | 146000.0 | . 37 17 | Economics | 50100.0 | 98600.0 | 96.8 | 50600.0 | 70600.0 | 145000.0 | 210000.0 | . 38 44 | Physics | 50300.0 | 97300.0 | 93.4 | 56000.0 | 74200.0 | 132000.0 | 178000.0 | . 39 14 | Construction | 53700.0 | 88900.0 | 65.5 | 56300.0 | 68100.0 | 118000.0 | 171000.0 | . 40 10 | Civil Engineering | 53900.0 | 90500.0 | 67.9 | 63400.0 | 75100.0 | 115000.0 | 148000.0 | . 41 40 | Nursing | 54200.0 | 67000.0 | 23.6 | 47600.0 | 56400.0 | 80900.0 | 98300.0 | . 42 13 | Computer Science | 55900.0 | 95500.0 | 70.8 | 56000.0 | 74900.0 | 122000.0 | 154000.0 | . 43 30 | Industrial Engineering | 57700.0 | 94700.0 | 64.1 | 57100.0 | 72300.0 | 132000.0 | 173000.0 | . 44 1 | Aerospace Engineering | 57700.0 | 101000.0 | 75.0 | 64300.0 | 82100.0 | 127000.0 | 161000.0 | . 45 38 | Mechanical Engineering | 57900.0 | 93600.0 | 61.7 | 63700.0 | 76200.0 | 120000.0 | 163000.0 | . 46 19 | Electrical Engineering | 60900.0 | 103000.0 | 69.1 | 69300.0 | 83800.0 | 130000.0 | 168000.0 | . 47 12 | Computer Engineering | 61400.0 | 105000.0 | 71.0 | 66100.0 | 84100.0 | 135000.0 | 162000.0 | . 48 8 | Chemical Engineering | 63200.0 | 107000.0 | 69.3 | 71900.0 | 87300.0 | 143000.0 | 194000.0 | . 49 43 | Physician Assistant | 74300.0 | 91700.0 | 23.4 | 66400.0 | 75200.0 | 108000.0 | 124000.0 | . fig = plt.figure(figsize=(8,14)) x = df2[&#39;Starting Median Salary&#39;] y = df2.index labels = df2[&#39;Undergraduate Major&#39;] plt.scatter(x, y, color=&#39;blue&#39;, label = &#39;Starting Median Salary&#39;) plt.yticks(y, labels) plt.xlabel(&#39;Salary in Dollars&#39;) plt.ylabel(&#39;Majors&#39;) plt.title(&#39;Starting Median Salary by Undergraduate Major&#39;) plt.legend(loc=1) plt.show() . From the plot now, it can be conclued that a major in spanish will most likely come with the lowest salary compared to a major of physical assistant. It is no suprise to see that all the engineering majors are amongst the top in starting salaries as those are usually the higher paying jobs in the market these days. It is suprising however, to see majors such as information technology and management information systems not as high as the engineering salaries as those jobs do pay as well as engineering jobs. This may be later down in a person&#39;s career where the pay increases. . fig = plt.figure(figsize=(8,14)) x = df2[&#39;Starting Median Salary&#39;] y = df2.index labels = df2[&#39;Undergraduate Major&#39;] plt.scatter(x, y, color=&#39;blue&#39;, label = &#39;Starting Median Salary&#39;) plt.yticks(y, labels) x2 = df2[&#39;Mid-Career Median Salary&#39;] plt.scatter(x2, y, color = &#39;red&#39;, label = &#39;Median Salary Mid-Career&#39;) plt.xlabel(&#39;Salary in Dollars&#39;) plt.ylabel(&#39;Majors&#39;) plt.title(&#39;Starting Median Salary by Undergraduate Major&#39;) plt.legend(loc=2) plt.show() . fig = plt.figure(figsize=(8,14)) x = df2[&#39;Starting Median Salary&#39;] y = df2.index labels = df2[&#39;Undergraduate Major&#39;] plt.scatter(x, y, color=&#39;blue&#39;, label = &#39;Starting Median Salary&#39;) plt.yticks(y, labels) x2 = df2[&#39;Mid-Career Median Salary&#39;] plt.scatter(x2, y, color = &#39;red&#39;, label = &#39;Median Salary Mid-Career&#39;) x3 = df2[&#39;Mid-Career 10th Percentile Salary&#39;] plt.scatter(x3, y, color = &#39;green&#39;, label = &#39;10th Percentile Median Salary Mid-Career&#39;) x4 = df2[&#39;Mid-Career 25th Percentile Salary&#39;] plt.scatter(x4, y, color = &#39;purple&#39;, label = &#39;25th Percentile Median Salary Mid-Career&#39;) x5 = df2[&#39;Mid-Career 75th Percentile Salary&#39;] plt.scatter(x5, y, color = &#39;yellow&#39;, label = &#39;75th Percentile Median Salary Mid-Career&#39;) x6 = df2[&#39;Mid-Career 90th Percentile Salary&#39;] plt.scatter(x6, y, color = &#39;orange&#39;, label = &#39;90th Percentile Median Salary Mid-Career&#39;) plt.xlabel(&#39;Salary in Dollars&#39;) plt.ylabel(&#39;Majors&#39;) plt.title(&#39;Starting Median Salary by Undergraduate Major&#39;) plt.legend(loc=4) plt.show() . fig = plt.figure(figsize=(10,8)) sns.set_theme(style=&quot;whitegrid&quot;) sns.barplot(x = &quot;Region&quot;, y = &quot;Starting Median Salary&quot;, palette=&quot;pastel&quot;, data=df3, ci = None).set(title = &quot;Starting Median Salary per Region&quot;) . [Text(0.5, 1.0, &#39;Starting Median Salary per Region&#39;)] . fig = plt.figure(figsize=(10,8)) sns.set_theme(style=&quot;whitegrid&quot;) sns.barplot(x = &quot;Region&quot;, y = &quot;Mid-Career Median Salary&quot;, palette=&quot;rocket&quot;, data=df3, ci = None).set(title = &quot;Mid-Career Median Salary per Region&quot;) . [Text(0.5, 1.0, &#39;Mid-Career Median Salary per Region&#39;)] . df2.sort_values(by = &#39;Percent change from Starting to Mid-Career Salary&#39;, ascending = True, inplace = True) df2 = df2.reset_index() df2.head(15) . level_0 index Undergraduate Major Starting Median Salary Mid-Career Median Salary Percent change from Starting to Mid-Career Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 49 | 43 | Physician Assistant | 74300.0 | 91700.0 | 23.4 | 66400.0 | 75200.0 | 108000.0 | 124000.0 | . 1 41 | 40 | Nursing | 54200.0 | 67000.0 | 23.6 | 47600.0 | 56400.0 | 80900.0 | 98300.0 | . 2 21 | 41 | Nutrition | 39900.0 | 55300.0 | 38.6 | 33900.0 | 44500.0 | 70500.0 | 99200.0 | . 3 10 | 32 | Interior Design | 36100.0 | 53200.0 | 47.4 | 35700.0 | 42600.0 | 72500.0 | 107000.0 | . 4 2 | 18 | Education | 34900.0 | 52000.0 | 49.0 | 29300.0 | 37900.0 | 73400.0 | 102000.0 | . 5 13 | 29 | Hospitality &amp; Tourism | 37800.0 | 57500.0 | 52.1 | 35500.0 | 43600.0 | 81900.0 | 124000.0 | . 6 35 | 31 | Information Technology (IT) | 49100.0 | 74800.0 | 52.3 | 44500.0 | 56700.0 | 96700.0 | 129000.0 | . 7 1 | 47 | Religion | 34100.0 | 52000.0 | 52.5 | 29700.0 | 36500.0 | 70900.0 | 96400.0 | . 8 9 | 39 | Music | 35900.0 | 55000.0 | 53.2 | 26700.0 | 40200.0 | 88000.0 | 134000.0 | . 9 18 | 27 | Health Care Administration | 38800.0 | 60600.0 | 56.2 | 34600.0 | 45600.0 | 78800.0 | 101000.0 | . 10 0 | 49 | Spanish | 34000.0 | 53100.0 | 56.2 | 31000.0 | 40000.0 | 76800.0 | 96400.0 | . 11 7 | 16 | Drama | 35900.0 | 56900.0 | 58.5 | 36700.0 | 41300.0 | 79100.0 | 153000.0 | . 12 26 | 24 | Geography | 41200.0 | 65500.0 | 59.0 | 40000.0 | 50000.0 | 90800.0 | 132000.0 | . 13 11 | 48 | Sociology | 36500.0 | 58200.0 | 59.5 | 30700.0 | 40400.0 | 81200.0 | 118000.0 | . 14 19 | 23 | Forestry | 39100.0 | 62600.0 | 60.1 | 41000.0 | 49300.0 | 78200.0 | 111000.0 | . fig = plt.figure(figsize=(8,14)) sns.set(style=&quot;whitegrid&quot;, color_codes=True) sns.barplot(x=&#39;Percent change from Starting to Mid-Career Salary&#39;, y=&#39;Undergraduate Major&#39;, data = df2, color = &#39;green&#39;) plt.xlabel(&#39;Percent Change&#39;,fontsize=16); plt.ylabel(&#39;Majors&#39;, fontsize=16); plt.title(&#39;Percent Change of Salaries for Different Majors&#39;, fontsize=16, weight = &#39;bold&#39;) . Text(0.5, 1.0, &#39;Percent Change of Salaries for Different Majors&#39;) . fig = plt.figure(figsize=(10,8)) x = df[&#39;Starting Median Salary&#39;] y = df[&#39;Mid-Career Median Salary&#39;] plt.scatter(x,y) plt.xlabel(&quot;Starting Median Salary&quot;) plt.ylabel(&quot;Mid-Career Median Salary&quot;) plt.title(&#39;Starting Median Salary vs. Mid-Career&#39;,weight = &#39;bold&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career&#39;) . x = df[&#39;Starting Median Salary&#39;] y = df[&#39;Mid-Career 25th Percentile Salary&#39;] fig = plt.figure(figsize=(10,8)) plt.scatter(x,y, color = &#39;orange&#39;) plt.xlabel(&quot;Starting Median Salary&quot;) plt.ylabel(&quot;Mid-Career 25th Percentile Salary&quot;) plt.title(&#39;Starting Median Salary vs. Mid-Career 25th Percentile&#39;, weight = &#39;bold&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 25th Percentile&#39;) . x = df[&#39;Starting Median Salary&#39;] y = df[&#39;Mid-Career 75th Percentile Salary&#39;] fig = plt.figure(figsize=(10,8)) plt.scatter(x,y, color = &#39;green&#39;) plt.xlabel(&quot;Starting Median Salary&quot;) plt.ylabel(&quot;Mid-Career 75th Percentile Salary&quot;) plt.title(&#39;Starting Median Salary vs. Mid-Career 75th Percentile&#39;, weight = &#39;bold&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 75th Percentile&#39;) . ## Going to take a subset of the data, only focusing on engineering, liberal arts, and ivy league schools from sklearn.preprocessing import MinMaxScaler from sklearn.metrics import mean_squared_error, r2_score subsetdf = df[df[&#39;School Type&#39;].isin([&#39;Engineering&#39;, &#39;Ivy League&#39;,&#39;Liberal Arts&#39;]) ] subsetdf fig = plt.figure(figsize=(10,8)) ##setting which x and y from the plots I want to look at x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 25th Percentile Salary&#39;] x = x.values.reshape(-1,1) scaler = MinMaxScaler() x = scaler.fit_transform(x) #setting model to use model = sklearn.linear_model.LinearRegression() ##gathering test and training data x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( x, y, test_size=0.2, random_state=42) model.fit(x_train,y_train) y_pred = model.predict(x_test) print(&quot;Y-Intercept = %.2f&quot; % model.intercept_) print(&quot;X-Coefficients= &quot;, model.coef_) print(&#39;MSE = %.2f&#39; % mean_squared_error(y_test, y_pred)) print(&#39;R^2 = %.2f&#39; % r2_score(y_test, y_pred)) plt.scatter(x_train,y_train,color=&#39;black&#39;) plt.scatter(x_test,y_test,color=&#39;blue&#39;) ## Creating the Regression Model x_model_vals = np.linspace(0.0, 1.0, 37).reshape(-1,1) y_model1_vals = model.predict(x_model_vals) plt.plot(x_model_vals,y_model1_vals,&#39;red&#39;) plt.xlabel(&quot;Starting Median Salary&quot;, fontsize = 16) plt.ylabel(&quot;Mid-Career Median Salary&quot;, fontsize = 16) plt.title(&quot;Starting vs. Mid-Career Salaries&quot;, fontsize = 16, weight = &#39;bold&#39;) y_pred = model.predict(x_test) . Y-Intercept = 50170.06 X-Coefficients= [56741.41025207] MSE = 36691859.80 R^2 = 0.80 . Analysis . Taking a look at the first couple graphs in the exploratory data analysis portion, they had portrayed the starting salaries dependent on the different majors offered as an undergrad. The first one in particular only represented the median starting salaries, and from it, it was concluded that the physician assistant major had the best starting salary out of all the majors, earning about 74,300 dollars. The lowest out of all the majors was the spanish major, only making around 34,000 dollars. Majors in the engineering fields did well as expected, as those are most of the time very lucrative jobs. These engineering fields earned from around 57 thousand dollars all the way up to 63 thousand dollars. It is also important to note that majors in the business fields and majors that involved computer systems did well as well, earning at least 50 thousand at a starting salary. What is important to note is the following graph which also included the mid-career median salaries. This graphic may be more important to analyze as it will give insight to fields that are better paying as the person gains experience. It is no surpise that the engineering majors had a good increase from around 60 thousand dollars in the beginning to earning at least 90 thousand in their mid career. People with economics and physics majors also took a big jump as they make around double their starting salary. Looking at the percent change barplot a few graphs later, it can be seen that philosophy and math had over a 100% increase from their starting salary to the mid-career, and physics and economics majors had over 90%. It is also surprising that the physicians assistant major, that was the highest starting salary, did not have much of an increase at only 23% making 90 thousand. Majors like spanish, religion, education, etc., had increases, but are still majors that are not really lucrative. So for those that are looking for good paying jobs, should so far look into the engineering fields and also fields that involve computer systems. It is also interesting to see that in the 90th percentile, an economics major is making over 200 thousand, which goes to show that with enough effort the economics degree will pay off. Now taking at the salaries per region, the bar plots are created to illustrate the different regions addressed, which include California, Western, Mid-Western, Southern and North-Eastern regions. Out of these 4 regions, California and the Northeastern regions have the better starting salaries out of all the job fields. The average starting salaries in these regions are just above 50 thousand in California and just below 50 thousand for the Northeastern region. When it comes to the mid career salaries, this still holds true as the average salary in California and the northeastern region are around 90 thousand. Lastly with the multiple final scatter plots, they were used to show the relation with starting salary and mid career salary. As expected, there is a positive correlation all around as, it should be known that as a person gains experience, their salary goes up. However looking at the linear regresion model that only includes engineering, ivy league, and liberal arts schools, we can predict that there is an increase in mid career salaries by 56,741 dollars for the increase of starting salaries. This basically means that higher starting salaries, which are usually found from schools in the engineering and ivy league types are more likely to see a higher mid- career salary. . Conclusion . Returning to the big question of &quot;Is college worth it?&quot;, it can be concluded that there really is no one right answer. It really depends on the career path that one chooses. However, if that career path involves jobs in the business, economics, engineering, and the other computer system field, the answer then shift more towards that it is definitely worth it. Jobs in those respective fields all require more knowledge that someone just out of high school cannot simply have. The reason there is such a high ceiling for those job is because of the intensive knowledge that one must gain and not just from experience. The field of business, economics, and engineering are all advancing as technology advances, so it is crucial for those that want to pursue those jobs to attend college no matter the costs. But when you look at careers in more liberal arts areas, like the spanish and religion majors, there is not much money there. So, it can be persuading that college may not be the route for them. If money is not the issue and one just has a passion for those fields, then by all means, go for it. .",
            "url": "https://jpmagbitang.github.io/Final-Project-Fastai/fastpages/jupyter/2022/09/02/Final-Notebook.html",
            "relUrl": "/fastpages/jupyter/2022/09/02/Final-Notebook.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Project Assignment",
            "content": "Import the Data . import sklearn.cluster import sklearn.linear_model import sklearn.model_selection import matplotlib.pyplot as plt import numpy as np import ipywidgets import plotly.graph_objects as go import pandas as pd ## importing the dataset df = pd.read_csv(&#39;salaries-by-college-type.csv&#39;) . df . School Name School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Massachusetts Institute of Technology (MIT) | Engineering | $72,200.00 | $126,000.00 | $76,800.00 | $99,200.00 | $168,000.00 | $220,000.00 | . 1 California Institute of Technology (CIT) | Engineering | $75,500.00 | $123,000.00 | NaN | $104,000.00 | $161,000.00 | NaN | . 2 Harvey Mudd College | Engineering | $71,800.00 | $122,000.00 | NaN | $96,000.00 | $180,000.00 | NaN | . 3 Polytechnic University of New York, Brooklyn | Engineering | $62,400.00 | $114,000.00 | $66,800.00 | $94,300.00 | $143,000.00 | $190,000.00 | . 4 Cooper Union | Engineering | $62,200.00 | $114,000.00 | NaN | $80,200.00 | $142,000.00 | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 264 Austin Peay State University | State | $37,700.00 | $59,200.00 | $32,200.00 | $40,500.00 | $73,900.00 | $96,200.00 | . 265 Pittsburg State University | State | $40,400.00 | $58,200.00 | $25,600.00 | $46,000.00 | $84,600.00 | $117,000.00 | . 266 Southern Utah University | State | $41,900.00 | $56,500.00 | $30,700.00 | $39,700.00 | $78,400.00 | $116,000.00 | . 267 Montana State University - Billings | State | $37,900.00 | $50,600.00 | $22,600.00 | $31,800.00 | $78,500.00 | $98,900.00 | . 268 Black Hills State University | State | $35,300.00 | $43,900.00 | $27,000.00 | $32,200.00 | $60,900.00 | $87,600.00 | . 269 rows × 8 columns . df = df.drop(df.columns[0], axis=1) df.describe() . School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . count 269 | 269 | 269 | 231 | 269 | 269 | 231 | . unique 5 | 145 | 168 | 141 | 178 | 110 | 98 | . top State | $42,600.00 | $72,100.00 | $40,100.00 | $54,100.00 | $106,000.00 | $150,000.00 | . freq 175 | 7 | 5 | 6 | 6 | 11 | 8 | . df[&quot;School Type&quot;].value_counts() . State 175 Liberal Arts 47 Party 20 Engineering 19 Ivy League 8 Name: School Type, dtype: int64 . df.groupby(&#39;School Type&#39;).count() . Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . School Type . Engineering 19 | 19 | 15 | 19 | 19 | 15 | . Ivy League 8 | 8 | 8 | 8 | 8 | 8 | . Liberal Arts 47 | 47 | 14 | 47 | 47 | 14 | . Party 20 | 20 | 19 | 20 | 20 | 19 | . State 175 | 175 | 175 | 175 | 175 | 175 | . subsetdf = df[df[&#39;School Type&#39;].isin([&#39;Engineering&#39;, &#39;Ivy League&#39;,&#39;Liberal Arts&#39;]) ] subsetdf . School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Engineering | $72,200.00 | $126,000.00 | $76,800.00 | $99,200.00 | $168,000.00 | $220,000.00 | . 1 Engineering | $75,500.00 | $123,000.00 | NaN | $104,000.00 | $161,000.00 | NaN | . 2 Engineering | $71,800.00 | $122,000.00 | NaN | $96,000.00 | $180,000.00 | NaN | . 3 Engineering | $62,400.00 | $114,000.00 | $66,800.00 | $94,300.00 | $143,000.00 | $190,000.00 | . 4 Engineering | $62,200.00 | $114,000.00 | NaN | $80,200.00 | $142,000.00 | NaN | . ... ... | ... | ... | ... | ... | ... | ... | . 89 Ivy League | $63,400.00 | $124,000.00 | $54,800.00 | $86,200.00 | $179,000.00 | $288,000.00 | . 90 Ivy League | $60,900.00 | $120,000.00 | $55,900.00 | $79,200.00 | $192,000.00 | $282,000.00 | . 91 Ivy League | $60,300.00 | $110,000.00 | $56,800.00 | $79,800.00 | $160,000.00 | $210,000.00 | . 92 Ivy League | $56,200.00 | $109,000.00 | $55,400.00 | $74,400.00 | $159,000.00 | $228,000.00 | . 93 Ivy League | $59,400.00 | $107,000.00 | $50,300.00 | $71,900.00 | $161,000.00 | $241,000.00 | . 74 rows × 7 columns . subsetcol= [&#39;Starting Median Salary&#39;,&#39;Mid-Career Median Salary&#39;,&#39;Mid-Career 10th Percentile Salary&#39;,&#39;Mid-Career 25th Percentile Salary&#39;,&#39;Mid-Career 75th Percentile Salary&#39;,&#39;Mid-Career 90th Percentile Salary&#39;] for x in subsetcol: subsetdf[x] = subsetdf[x].str.replace(&quot;$&quot;,&quot;&quot;) subsetdf[x] = subsetdf[x].str.replace(&quot;,&quot;,&quot;&quot;) subsetdf[x] = pd.to_numeric(subsetdf[x]) subsetdf.head() . C: Users Patrick Magbitang AppData Local Temp ipykernel_2388 128551400.py:6: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True. subsetdf[x] = subsetdf[x].str.replace(&#34;$&#34;,&#34;&#34;) C: Users Patrick Magbitang AppData Local Temp ipykernel_2388 128551400.py:6: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy subsetdf[x] = subsetdf[x].str.replace(&#34;$&#34;,&#34;&#34;) C: Users Patrick Magbitang AppData Local Temp ipykernel_2388 128551400.py:7: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy subsetdf[x] = subsetdf[x].str.replace(&#34;,&#34;,&#34;&#34;) C: Users Patrick Magbitang AppData Local Temp ipykernel_2388 128551400.py:8: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy subsetdf[x] = pd.to_numeric(subsetdf[x]) . School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Engineering | 72200.0 | 126000.0 | 76800.0 | 99200.0 | 168000.0 | 220000.0 | . 1 Engineering | 75500.0 | 123000.0 | NaN | 104000.0 | 161000.0 | NaN | . 2 Engineering | 71800.0 | 122000.0 | NaN | 96000.0 | 180000.0 | NaN | . 3 Engineering | 62400.0 | 114000.0 | 66800.0 | 94300.0 | 143000.0 | 190000.0 | . 4 Engineering | 62200.0 | 114000.0 | NaN | 80200.0 | 142000.0 | NaN | . Step 3: Question to Explore . How can machine learning predict what is are the most lucrative jobs in the future? I will be looking at the df dataset which is a dataset that gives the starting salaries coming from different college degrees and also the future salaries. I have taken that df dataset and created a subset dataset to look specifically at engineering, ivy league, and liberal arts schools. This gives me a set of 74 observations. The variables I will be looking at are Starting Median Salary which will be my independent variable, and I will be putting this against the variables that display future salary predictions. It will help me see if there is a good correlation between starting salaries and future salaries and see if these predictions of the future salaries are justified. . Step 4: Plots Regarding Question . subsetdf = subsetdf.dropna() subsetdf . School Type Starting Median Salary Mid-Career Median Salary Mid-Career 10th Percentile Salary Mid-Career 25th Percentile Salary Mid-Career 75th Percentile Salary Mid-Career 90th Percentile Salary . 0 Engineering | 72200.0 | 126000.0 | 76800.0 | 99200.0 | 168000.0 | 220000.0 | . 3 Engineering | 62400.0 | 114000.0 | 66800.0 | 94300.0 | 143000.0 | 190000.0 | . 5 Engineering | 61000.0 | 114000.0 | 80000.0 | 91200.0 | 137000.0 | 180000.0 | . 6 Engineering | 61800.0 | 111000.0 | 63300.0 | 80100.0 | 150000.0 | 209000.0 | . 7 Engineering | 61100.0 | 110000.0 | 71600.0 | 85500.0 | 140000.0 | 182000.0 | . 8 Engineering | 58300.0 | 106000.0 | 67200.0 | 85200.0 | 137000.0 | 183000.0 | . 9 Engineering | 58100.0 | 106000.0 | 62200.0 | 87900.0 | 142000.0 | 201000.0 | . 10 Engineering | 60600.0 | 105000.0 | 68700.0 | 81900.0 | 138000.0 | 185000.0 | . 11 Engineering | 56000.0 | 97800.0 | 56100.0 | 77400.0 | 121000.0 | 165000.0 | . 12 Engineering | 53000.0 | 96700.0 | 55200.0 | 74000.0 | 117000.0 | 153000.0 | . 13 Engineering | 53500.0 | 95400.0 | 50600.0 | 71400.0 | 124000.0 | 163000.0 | . 14 Engineering | 55800.0 | 93400.0 | 71500.0 | 81900.0 | 122000.0 | 147000.0 | . 16 Engineering | 48900.0 | 84600.0 | 45000.0 | 62100.0 | 112000.0 | 159000.0 | . 17 Engineering | 52700.0 | 80700.0 | 49800.0 | 64000.0 | 106000.0 | 142000.0 | . 18 Engineering | 46200.0 | 80000.0 | 42100.0 | 62600.0 | 99500.0 | 121000.0 | . 39 Liberal Arts | 54100.0 | 110000.0 | 62800.0 | 80600.0 | 156000.0 | 251000.0 | . 40 Liberal Arts | 52800.0 | 108000.0 | 60000.0 | 76700.0 | 167000.0 | 265000.0 | . 42 Liberal Arts | 53900.0 | 107000.0 | 70600.0 | 79300.0 | 144000.0 | 204000.0 | . 52 Liberal Arts | 46500.0 | 97900.0 | 42000.0 | 62500.0 | 126000.0 | 215000.0 | . 54 Liberal Arts | 47200.0 | 95800.0 | 48700.0 | 75200.0 | 135000.0 | 230000.0 | . 55 Liberal Arts | 48600.0 | 94600.0 | 44500.0 | 59400.0 | 151000.0 | 211000.0 | . 60 Liberal Arts | 41400.0 | 88300.0 | 49500.0 | 57400.0 | 133000.0 | 185000.0 | . 61 Liberal Arts | 45300.0 | 86200.0 | 41300.0 | 61000.0 | 120000.0 | 185000.0 | . 64 Liberal Arts | 45500.0 | 85200.0 | 38700.0 | 58400.0 | 129000.0 | 189000.0 | . 65 Liberal Arts | 44000.0 | 83900.0 | 45100.0 | 59800.0 | 129000.0 | 184000.0 | . 71 Liberal Arts | 46600.0 | 81500.0 | 48900.0 | 60100.0 | 104000.0 | 137000.0 | . 76 Liberal Arts | 42100.0 | 80000.0 | 35600.0 | 54300.0 | 100000.0 | 160000.0 | . 82 Liberal Arts | 38900.0 | 72600.0 | 38200.0 | 53400.0 | 104000.0 | 140000.0 | . 85 Liberal Arts | 39500.0 | 63900.0 | 38800.0 | 47200.0 | 91600.0 | 120000.0 | . 86 Ivy League | 58000.0 | 134000.0 | 63100.0 | 90200.0 | 234000.0 | 321000.0 | . 87 Ivy League | 66500.0 | 131000.0 | 68900.0 | 100000.0 | 190000.0 | 261000.0 | . 88 Ivy League | 59100.0 | 126000.0 | 58000.0 | 80600.0 | 198000.0 | 326000.0 | . 89 Ivy League | 63400.0 | 124000.0 | 54800.0 | 86200.0 | 179000.0 | 288000.0 | . 90 Ivy League | 60900.0 | 120000.0 | 55900.0 | 79200.0 | 192000.0 | 282000.0 | . 91 Ivy League | 60300.0 | 110000.0 | 56800.0 | 79800.0 | 160000.0 | 210000.0 | . 92 Ivy League | 56200.0 | 109000.0 | 55400.0 | 74400.0 | 159000.0 | 228000.0 | . 93 Ivy League | 59400.0 | 107000.0 | 50300.0 | 71900.0 | 161000.0 | 241000.0 | . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career Median Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career&#39;) . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 10th Percentile Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career 10th Percentile&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 10th Percentile&#39;) . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 25th Percentile Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career 25th Percentile&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 25th Percentile&#39;) . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 75th Percentile Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career 75th Percentile&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 75th Percentile&#39;) . x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 90th Percentile Salary&#39;] plt.scatter(x,y) plt.title(&#39;Starting Median Salary vs. Mid-Career 90th Percentile&#39;) . Text(0.5, 1.0, &#39;Starting Median Salary vs. Mid-Career 90th Percentile&#39;) . Step 5: Machine Learning Train/Test . from sklearn.preprocessing import MinMaxScaler from sklearn.metrics import mean_squared_error, r2_score ##setting which x and y from the plots I want to look at x = subsetdf[&#39;Starting Median Salary&#39;] y = subsetdf[&#39;Mid-Career 25th Percentile Salary&#39;] x = x.values.reshape(-1,1) scaler = MinMaxScaler() x = scaler.fit_transform(x) #setting model to use model = sklearn.linear_model.LinearRegression() ##gathering test and training data x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split( x, y, test_size=0.2, random_state=42) model.fit(x_train,y_train) y_pred = model.predict(x_test) print(&quot;Y-Intercept = %.2f&quot; % model.intercept_) print(&quot;X-Coefficients= &quot;, model.coef_) print(&#39;MSE = %.2f&#39; % mean_squared_error(y_test, y_pred)) print(&#39;R^2 = %.2f&#39; % r2_score(y_test, y_pred)) plt.scatter(x_train,y_train,color=&#39;black&#39;) plt.scatter(x_test,y_test,color=&#39;blue&#39;) ## Creating the Regression Model x_model_vals = np.linspace(0.0, 1.0, 37).reshape(-1,1) y_model1_vals = model.predict(x_model_vals) plt.plot(x_model_vals,y_model1_vals,&#39;red&#39;) y_pred = model.predict(x_test) . Y-Intercept = 51626.91 X-Coefficients= [50020.40238362] MSE = 34236454.02 R^2 = 0.79 . From the train/test split we get that the mean squared error is 34236454.02 and that r squared value is 0.79. The r squared is relatively high therefore we can say the regression fits pretty well with the points from these sets. .",
            "url": "https://jpmagbitang.github.io/Final-Project-Fastai/fastpages/jupyter/2022/08/29/Project-Assignment-2.html",
            "relUrl": "/fastpages/jupyter/2022/08/29/Project-Assignment-2.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jpmagbitang.github.io/Final-Project-Fastai/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jpmagbitang.github.io/Final-Project-Fastai/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jpmagbitang.github.io/Final-Project-Fastai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jpmagbitang.github.io/Final-Project-Fastai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}